DROP TABLE IF EXISTS KYC_TEMP_OFFERS_ERRORS;
DROP TABLE IF EXISTS KYC_TEMP_OFFERS;
DROP TABLE IF EXISTS KYC_OFFERS;
DROP TABLE IF EXISTS KYC_CAMPAIGN;
DROP TABLE IF EXISTS KYC_STATUS_OFFER;
DROP SEQUENCE IF EXISTS SEQ_KYC_TEMP_OFFERS;
DROP SEQUENCE IF EXISTS SEQ_KYC_OFFERS;

CREATE TABLE KYC_TEMP_OFFERS(
	ID INTEGER,
	KEY_PRE_CAMPAIGN VARCHAR(50) NOT NULL,
	RECORD_EXCEL INTEGER,
	CUSTOMER_NUMBER INTEGER,
	CUSTOMER_EMAIL VARCHAR(40),
	OFFER_NAME VARCHAR(50),
	OFFER_DESCRIPTION VARCHAR(100),
	PROMOTIONAL_CODE VARCHAR(12),
	DISCOUNT INTEGER,
	REWARD VARCHAR(50),
	START_DATE DATE, 
	END_DATE DATE,
	TERM_AND_CONDITIONS_LINK VARCHAR(100),
	PROCESSED BOOLEAN
);

CREATE TABLE KYC_TEMP_OFFERS_ERRORS(
	ID SERIAL,
	ID_TEMP_OFFER INTEGER,
    ERROR_FIELD VARCHAR(30),
	ERROR_DETAIL VARCHAR(80)
);

CREATE TABLE KYC_OFFERS(
	ID INTEGER,
	CUSTOMER_NUMBER INTEGER NOT NULL,
	CUSTOMER_EMAIL VARCHAR(20),
	OFFER_NAME VARCHAR(50) NOT NULL,
	OFFER_DESCRIPTION VARCHAR(100) NOT NULL,
	PROMOTIONAL_CODE VARCHAR(12),
	DISCOUNT INTEGER,
	REWARD VARCHAR(50),
	START_DATE DATE NOT NULL, 
	END_DATE DATE NOT NULL,
	TERM_AND_CONDITIONS_LINK VARCHAR(50) NOT NULL,
	STATUS INTEGER NOT NULL,
	ID_CAMPAIGN INTEGER
);

CREATE TABLE KYC_CAMPAIGN(
	ID SERIAL,
	CAMPAIGN_NAME VARCHAR(20) NOT NULL,
	CREATION_DATE DATE NOT NULL,
	START_CAMPAIGN_DATE DATE NOT NULL,
	END_CAMPAIGN_DATE DATE NOT NULL,
	ACTIVE BOOLEAN NOT NULL
);

CREATE TABLE KYC_STATUS_OFFER(
	ID SERIAL,
	DESCRIPTION VARCHAR(20)
);

CREATE SEQUENCE IF NOT EXISTS SEQ_KYC_TEMP_OFFERS
	AS INT
	INCREMENT BY 10
	MINVALUE 1
	NO MAXVALUE
	START WITH 1
	NO CYCLE 
	OWNED BY KYC_TEMP_OFFERS.ID;

CREATE SEQUENCE IF NOT EXISTS SEQ_KYC_OFFERS
	AS INT
	INCREMENT BY 1
	MINVALUE 1
	NO MAXVALUE
	START WITH 1
	NO CYCLE 
	OWNED BY KYC_OFFERS.ID;

ALTER TABLE KYC_TEMP_OFFERS ADD PRIMARY KEY(ID);
ALTER TABLE KYC_OFFERS ADD PRIMARY KEY(ID);
ALTER TABLE KYC_CAMPAIGN ADD PRIMARY KEY(ID);
ALTER TABLE KYC_STATUS_OFFER ADD PRIMARY KEY(ID);
ALTER TABLE KYC_TEMP_OFFERS_ERRORS ADD PRIMARY KEY(ID);

ALTER TABLE KYC_OFFERS ADD CONSTRAINT FK_KYC_OFFERS_ID_CAMPAIGN
FOREIGN KEY (ID_CAMPAIGN) REFERENCES KYC_OFFERS(ID) ON DELETE CASCADE;

ALTER TABLE KYC_OFFERS ADD CONSTRAINT FK_STATUS
FOREIGN KEY (STATUS) REFERENCES KYC_STATUS_OFFER(ID) ON DELETE CASCADE;

ALTER TABLE KYC_TEMP_OFFERS_ERRORS ADD CONSTRAINT FK_ID_TEMP_OFFER
FOREIGN KEY(ID_TEMP_OFFER) REFERENCES KYC_TEMP_OFFERS(ID) ON DELETE CASCADE;

INSERT INTO KYC_STATUS_OFFER(DESCRIPTION) VALUES('UNPUBLISHED');
INSERT INTO KYC_STATUS_OFFER(DESCRIPTION) VALUES('PUBLISHED');
INSERT INTO KYC_STATUS_OFFER(DESCRIPTION) VALUES('ACCEPTED');
INSERT INTO KYC_STATUS_OFFER(DESCRIPTION) VALUES('EXPIRED');