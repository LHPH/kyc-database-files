DROP TRIGGER IF EXISTS TRIGGER_VALIDATE_OFFER ON KYC_TEMP_OFFERS;
DROP FUNCTION IF EXISTS SP_KYC_VALIDATE_OFFER;

--SP_KYC_VALIDATE_OFFER
CREATE OR REPLACE FUNCTION SP_KYC_VALIDATE_OFFER()
    RETURNS TRIGGER
    LANGUAGE plpgsql
AS $$
BEGIN
    
    IF NEW.CUSTOMER_NUMBER IS NULL THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'CUSTOMER_NUMBER','CUSTOMER NUMBER IS NULL');
    END IF;

    IF NEW.CUSTOMER_NUMBER <= 0 THEN
         INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'CUSTOMER_NUMBER','CUSTOMER NUMBER MUST BE GREATER THAN ZERO');
    END IF;

    IF NEW.CUSTOMER_EMAIL IS NULL THEN
       INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'CUSTOMER_EMAIL','CUSTOMER EMAIL IS NULL');
    END IF;

    IF NEW.CUSTOMER_EMAIL !~* '^[a-zA-Z\d\.]{1,20}@([a-zA-Z\d]{1,10}\.([\.a-zA-Z\d]){1,10})$' THEN
       INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'CUSTOMER_EMAIL','CUSTOMER EMAIL IS BAD FORMED');
    END IF;

    IF NEW.OFFER_NAME IS NULL THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'OFFER_NAME','OFFER NAME IS NULL');
    END IF;

    IF NEW.OFFER_DESCRIPTION IS NULL THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'OFFER_DESCRIPTION','OFFER DESCRIPTION IS NULL');
    END IF;

    IF NEW.PROMOTIONAL_CODE IS NOT NULL AND NEW.PROMOTIONAL_CODE !~* '^[A-Z\d]{10,12}$' THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'PROMOTIONAL_CODE','PROMOTIONAL CODE MUST BE ALPHANUMERIC, 10 TO 12 LENGTH');
    END IF;

    IF NEW.DISCOUNT IS NULL OR NEW.DISCOUNT < 0 THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'DISCOUNT','DISCOUNT MUST BE GREATER THAN ZERO');
    END IF;

    IF NEW.START_DATE IS NULL OR NEW.START_DATE < CURRENT_DATE THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'START_DATE','START DATE IS INVALID');
    END IF;

    IF NEW.END_DATE IS NULL OR NEW.END_DATE < CURRENT_DATE OR NEW.END_DATE < NEW.START_DATE THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'END_DATE','END_DATE IS INVALID');
    END IF;

    IF NEW.TERM_AND_CONDITIONS_LINK IS NULL THEN
        INSERT INTO KYC_TEMP_OFFERS_ERRORS(ID_TEMP_OFFER,ERROR_FIELD,ERROR_DETAIL) VALUES(NEW.ID,'TERM_AND_CONDITIONS_LINK','TERM AND CONDITIONS IS INVALID');
    END IF;

    RETURN NEW;
END;
$$

-- SP_CLEAN_KYC_TEMP_OFFERS

CREATE OR REPLACE PROCEDURE SP_CLEAN_KYC_TEMP_OFFERS(
    IN P_CHUNK_SIZE INTEGER DEFAULT 5,
    INOUT P_ERROR_CODE VARCHAR(10) DEFAULT NULL,
    INOUT P_ERROR_DETAIL TEXT DEFAULT NULL,
    INOUT P_DELETED_ROWS INTEGER DEFAULT 0
)
LANGUAGE plpgsql
AS $$
DECLARE
    V_PROCESSED_ROWS INTEGER;
    V_ERROR_DETAIL TEXT;
BEGIN
    
	LOOP
		DELETE FROM KYC_TEMP_OFFERS WHERE ID IN(
			SELECT ID FROM KYC_TEMP_OFFERS ORDER BY ID ASC LIMIT P_CHUNK_SIZE
		);
	    GET DIAGNOSTICS V_PROCESSED_ROWS = ROW_COUNT;
	    P_DELETED_ROWS = P_DELETED_ROWS + V_PROCESSED_ROWS;
        RAISE INFO 'DELETED % ROWS FROM KYC_TEMP_OFFERS',P_DELETE_ROWS;
	   
       /*ONLY WITH NO EXCEPTION HANDLER
	   IF V_PROCESSED_ROWS > 0 THEN
	   	 COMMIT;
	   	 
	   END IF;*/
	   
	   IF V_PROCESSED_ROWS = 0 THEN
	     RAISE INFO 'NO MORE ROWS TO DELETE';
	     EXIT;
	   END IF;
	END LOOP;
EXCEPTION
	WHEN OTHERS THEN
		GET STACKED DIAGNOSTICS V_ERROR_DETAIL = MESSAGE_TEXT;--SQLERRM 
		P_ERROR_CODE = SQLSTATE;
		P_ERROR_DETAIL = V_ERROR_DETAIL;
	    RAISE WARNING 'HAS OCURRED A ERROR: % - %',P_ERROR_CODE,P_ERROR_DETAIL;
		RETURN;
END;
$$

-- TRIGGER TRIGGER_VALIDATE_OFFER
CREATE TRIGGER TRIGGER_VALIDATE_OFFER 
	AFTER INSERT ON KYC_TEMP_OFFERS
	FOR EACH ROW
	EXECUTE FUNCTION SP_KYC_VALIDATE_OFFER();